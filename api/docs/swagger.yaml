definitions:
  common.AppError:
    properties:
      code:
        allOf:
        - $ref: '#/definitions/common.I18nCode'
        description: Client error code (i18n key)
      message:
        type: string
      status:
        type: integer
    type: object
  common.EntityCreationResponse:
    properties:
      id:
        type: integer
    type: object
  common.I18nCode:
    enum:
    - INTERNAL_SERVER_ERROR
    - BAD_REQUEST
    - UNAUTHORIZED
    type: string
    x-enum-varnames:
    - CodeInternalServerError
    - CodeBadRequestError
    - CodeUnauthorizedError
  common.Json:
    additionalProperties: {}
    type: object
  dto.HealthCheckResponse:
    properties:
      dbConnected:
        type: boolean
    type: object
  dto.NewFolderInput:
    properties:
      color:
        type: string
      icon:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  dto.NewVaultInput:
    properties:
      customFields:
        items:
          $ref: '#/definitions/entity.VaultCustomField'
        type: array
      folderId:
        type: integer
      name:
        type: string
      note:
        type: string
      properties:
        $ref: '#/definitions/entity.VaultProperties'
      type:
        $ref: '#/definitions/entity.VaultType'
    required:
    - name
    - properties
    - type
    type: object
  dto.UpdateFolderInput:
    properties:
      color:
        type: string
      folderId:
        type: integer
      icon:
        type: string
      name:
        type: string
    required:
    - folderId
    type: object
  dto.UserLoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.UserLogout:
    properties:
      refreshToken:
        type: string
    required:
    - refreshToken
    type: object
  dto.UserProfile:
    properties:
      avatar:
        type: string
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      preferences:
        $ref: '#/definitions/model.UserPreferencesModel'
      pwdHint:
        type: string
      updatedAt:
        type: string
    type: object
  dto.UserRegistrationInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      pwdHint:
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UserToken:
    properties:
      accessToken:
        type: string
      expiresIn:
        type: integer
      refreshToken:
        type: string
      tokenType:
        type: string
    type: object
  entity.KdfAlgorithm:
    enum:
    - pbkdf2
    - argon2
    type: string
    x-enum-varnames:
    - PBKDF2
    - Argon2
  entity.UserLanguage:
    enum:
    - en
    - vi
    type: string
    x-enum-varnames:
    - English
    - Vietnamese
  entity.UserThemeMode:
    enum:
    - light
    - dark
    - system
    type: string
    x-enum-varnames:
    - Light
    - Dark
    - System
  entity.VaultAction:
    enum:
    - lock
    - logout
    type: string
    x-enum-varnames:
    - Lock
    - Logout
  entity.VaultCustomField:
    properties:
      name:
        type: string
      type:
        type: string
      value:
        type: string
    type: object
  entity.VaultProperties:
    additionalProperties: {}
    type: object
  entity.VaultType:
    enum:
    - login
    - card
    type: string
    x-enum-varnames:
    - VaultTypeLogin
    - VaultTypeCard
  entity.VaultUpdateHistory:
    properties:
      createdAt:
        type: string
      value:
        $ref: '#/definitions/common.Json'
    type: object
  model.Folder:
    properties:
      color:
        type: string
      createdAt:
        type: string
      icon:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
      userId:
        type: integer
    type: object
  model.UserPreferencesModel:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      kdfAlgorithm:
        $ref: '#/definitions/entity.KdfAlgorithm'
      kdfIterations:
        type: integer
      kdfMemory:
        type: integer
      kdfParallelism:
        type: integer
      kdfSalt:
        type: string
      language:
        $ref: '#/definitions/entity.UserLanguage'
      theme:
        $ref: '#/definitions/entity.UserThemeMode'
      updatedAt:
        type: string
      userId:
        type: integer
      vaultTimeout:
        type: integer
      vaultTimeoutAction:
        $ref: '#/definitions/entity.VaultAction'
    type: object
  model.Vault:
    properties:
      createdAt:
        type: string
      customFields:
        items:
          $ref: '#/definitions/entity.VaultCustomField'
        type: array
      deleted:
        type: boolean
      folderId:
        type: integer
      id:
        type: integer
      name:
        type: string
      note:
        type: string
      properties:
        $ref: '#/definitions/entity.VaultProperties'
      type:
        $ref: '#/definitions/entity.VaultType'
      updateHistories:
        items:
          $ref: '#/definitions/entity.VaultUpdateHistory'
        type: array
      updatedAt:
        type: string
      userId:
        type: integer
    type: object
info:
  contact:
    name: Keychi Team
    url: https://github.com/dynonguyen/keychi
  description: Keychi | The best password manager for securely storing, managing data
    such as passwords, passkeys, OTP and credit cards.
  title: Keychi API
  version: "1.0"
paths:
  /admin/health-check:
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.HealthCheckResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - Bearer: []
      summary: Health check
      tags:
      - Admin
  /login:
    post:
      parameters:
      - description: Login input
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserLoginInput'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Login
      tags:
      - User
  /logout:
    post:
      parameters:
      - description: User logout input
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserLogout'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Logout
      tags:
      - User
  /profile:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserProfile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - Bearer: []
      summary: Get User Profile
      tags:
      - User
  /user:
    post:
      parameters:
      - description: dto.UserRegistrationInput
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegistrationInput'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.EntityCreationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      summary: Register a new user
      tags:
      - User
  /vault:
    post:
      parameters:
      - description: New vault information
        in: body
        name: vault
        required: true
        schema:
          $ref: '#/definitions/dto.NewVaultInput'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.EntityCreationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - Bearer: []
      summary: Create a new vault
      tags:
      - Vault
  /vault/folder:
    patch:
      parameters:
      - description: updated folder information
        in: body
        name: folder
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateFolderInput'
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - Bearer: []
      summary: Update a folder
      tags:
      - Vault
    post:
      parameters:
      - description: New folder information
        in: body
        name: folder
        required: true
        schema:
          $ref: '#/definitions/dto.NewFolderInput'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/common.EntityCreationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - Bearer: []
      summary: Create a new folder
      tags:
      - Vault
  /vault/folder/{id}:
    delete:
      parameters:
      - description: Folder ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - Bearer: []
      summary: Delete a folder
      tags:
      - Vault
  /vault/folders:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Folder'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - Bearer: []
      summary: List of user folders
      tags:
      - Vault
  /vaults:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Vault'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - Bearer: []
      summary: List of user vaults
      tags:
      - Vault
schemes:
- http
- https
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Manage services, health check and other admin tasks.
  name: Admin
- description: Manage user account, authentication and authorization.
  name: User
